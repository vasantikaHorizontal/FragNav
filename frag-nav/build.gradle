plugins {
    id 'com.android.library'
    id 'de.mannodermaus.android-junit5'
    id 'maven-publish'
    id 'kotlin-android'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "androidx.annotation:annotation:1.8.2"
    implementation 'androidx.fragment:fragment-ktx:1.8.3'

    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0"
    testImplementation "org.robolectric:robolectric:4.12.2"
    testImplementation 'org.amshove.kluent:kluent-android:1.72'

    // Spek
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
}

ext {
    libraryVersionCode = 30
    libraryVersionName = '1.0.0'

    //Bintray and Maven
    bintrayRepo = 'maven'
    bintrayName = 'frag-nav'

    publishedGroupId = 'com.ncapdevi'
    libraryName = 'FragNav'
    artifact = 'frag-nav'

    libraryDescription = 'A library to help manage multiple fragment stacks'

    siteUrl = 'https://github.com/vasantikaHorizontal/FragNav'
    gitUrl = 'https://github.com/vasantikaHorizontal/FragNav.git'

    developerId = 'vasantikaHorizontal'
    developerName = 'Vasantika Sindhi'
    developerEmail = 'vsindhi@horizontal.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

// Define your group and version
group = ext.publishedGroupId
version = ext.libraryVersionName

// Configure the publishing task
/*publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = libraryName
                description = libraryDescription
                url = siteUrl

                licenses {
                    license {
                        name = licenseName
                        url = licenseUrl
                    }
                }
                developers {
                    developer {
                        id = developerId
                        name = developerName
                        email = developerEmail
                    }
                }
                scm {
                    connection = "scm:git:$gitUrl"
                    developerConnection = "scm:git:$gitUrl"
                    url = siteUrl
                }
            }
        }
    }

}*/

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.github.vasantikaHorizontal'
            artifactId = 'FragNav'
            version = '2.0.0'

            afterEvaluate {
                from components.release
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:unchecked'])
}

android {
    namespace "${publishedGroupId}.fragnav"
    compileSdk rootProject.ext.compileSdkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion // deprecated, but needed in JitPack
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode libraryVersionCode
        versionName libraryVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
            }
        }
        unitTests.all {
            testLogging.events = ["passed", "skipped", "failed"]
        }
    }
}
